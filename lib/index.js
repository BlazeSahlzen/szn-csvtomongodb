'use strict';

/*------------------------------------------requring all the logical submodules------------------------------------------*/

/**
 * Wrapper around csvtojson npm module
 */
var csvtojson_wrapper = require('./csvtojson_wrapper');

/**
 * Maps the JSON-object to the mapping-table provided and generates intermediate queries
 */
var intermediate_query_generator = require('./intermediate_query_generator');

/**
 * Checks for dependency fulfillment of intermediate queries from the database
 */
var dependency_checker = require('./dependency_checker');

/**
 * Resolves all dependencies
 */
var dependency_resolver = require('./dependency_resolver');

/**
 * Generates MongoDB queries from resolved intermediate-queries
 */
var query_generator = require('./query_generator');

/**
 * Executes the queries on MongoDB
 */
var query_executor = require('./query_executor');

/*-------------------------------------------------------------------------------------------------------------------------*/

/*------------------------------------------------all the status & error codes---------------------------------------------*/

/**
 * All status codes
 * @type {Object}
 */
var statusCodes = {
    1: 'intermediate-query-generated',
    2: 'intermediate-query-has-dependency',
    3: 'intermediate-query-dependency-resolved',
    4: 'intermediate-query-dependency-unresolved',
    5: 'query-generated',
    6: 'query-executed'
};

/**
 * All error codes
 * @type {Object}
 */
var errorCodes = {
    0: 'unknown-error',
    1: 'dependency-unresolved',
    2: 'execution-failed'
};

/*-------------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------the query information table------------------------------------------------*/

/**
 * Contains all information related to queries, intermediate queries, query state, dependency, mapping table, etc.
 * @type {Object}
 */
var query_information_table = {

    /**
     * List of queries (final)
     * @type {Object}
     */
    queries: {},

    /**
     * List of intermediate queries
     * @type {Object}
     */
    intermediateQueries: {},

    /**
     * Internal State Table storing information about the queries
     * @type {Object}
     */
    internalStateTable: {},

    /**
     * Dependencies list storing information about the query dependencies
     * @type {Object}
     */
    dependencies: {},

    /**
     * Mapping table to convert from CSV to MongoDB query
     * @type {Object}
     */
    mappingTable: {},

    /**
     * Contains reference to server/app instance
     */
    app: null,

    /**
     * Contains reference to callback
     */
    callback: null
};

/*-------------------------------------------------------------------------------------------------------------------------*/

/*------------------------------------------------the main execution block-------------------------------------------------*/

/**
 * Function to invoke when each CSV record is parsed into simple JSON-object
 * @param  {Object} json_object The simple JSON object
 */
var on_record_parsed = function(json_object) {
    //////////////////////////////////////////////////////////////////////////////////
    // The intermediate query object, generated by the intermediate_query_generator //
    //////////////////////////////////////////////////////////////////////////////////
    var intermediateQuery = intermediate_query_generator.apply(query_information_table, [json_object]);

    ///////////////////////////////////////////////////////////////////////////////////////
    // To check for dependencies in intermediate queries and push into dependencies list //
    ///////////////////////////////////////////////////////////////////////////////////////
    dependency_checker.apply(query_information_table, [intermediateQuery]);
};

/**
 * Function to invoke when all CSV records have been parsed into simple JSON-objects
 */
var on_end_parsed = function() {

    //////////////////////////////////////////////////////////////
    // Callback for dependency_resolver, which is asynchronous! //
    //////////////////////////////////////////////////////////////    
    var callback = function() {

        ////////////////////////////////////////////////////////////////////////////////////
        // To (BULK) generate queries from intermediate queries and resolved dependencies //
        ////////////////////////////////////////////////////////////////////////////////////
        query_generator.apply(query_information_table);

        ///////////////////////////////////
        // To (BULK) execute all queries //
        ///////////////////////////////////
        
        query_executor.apply(query_information_table);
        
    };

    ////////////////////////////////////////
    // To (BULK) resolve the dependencies //
    ////////////////////////////////////////
    dependency_resolver.apply(query_information_table, [callback]);
};

/**
 * Function to generate and execute MongoDB queries from CSV-records
 * @param  {Object}   options     Mapping table, file-path to CSV file and DB config object
 * @param  {Function} callback    The callback function to call when operation is finished
 * 
 * options = {
 *     mappingTable: {
 *         // the mapping table
 *     },
 *     csvPath: "the-path-to-csv-file-from-root",
 *     app: {
 *         // the reference to the server/app instance
 *     }
 * };
 * 
 */
var csvtomongodb = function(options, callback) {
    /////////////////////////////////////////
    // Parameter checking & initialization //
    /////////////////////////////////////////
    if (!options.mappingTable) {
        throw new Error("Mapping table required!");
    } else {
        query_information_table.mappingTable = options.mappingTable;
    }
    
    if (!options.csvPath) {
        throw new Error("CSV file-path requried!");
    } else {
        query_information_table.csvPath = options.csvPath;
    }

    if (!options.app) {
        throw new Error("Server/app instance required!");
    } else {
        query_information_table.app = options.app;
    }

    if (!callback) {
        throw new Error("Callback required!");
    } else {
        query_information_table.callback = callback;
    }

    ////////////////////////////////////////////
    // Execute! Setting everything in motion! //
    ////////////////////////////////////////////
    csvtojson_wrapper(options.csvPath, on_record_parsed, on_end_parsed);
};

/*-------------------------------------------------------------------------------------------------------------------------*/

module.exports = csvtomongodb;
